<?php
$gemini_api_key = FreshRSS_Context::$user_conf->gemini_api_key ?? '';
$gemini_model = FreshRSS_Context::$user_conf->gemini_model ?? 'gemini-2.5-flash';
$gemini_general_prompt = FreshRSS_Context::$user_conf->gemini_general_prompt ?? 'Please provide a concise summary of the following article content:';
$gemini_youtube_prompt = FreshRSS_Context::$user_conf->gemini_youtube_prompt ?? 'Please provide a concise summary of this YouTube video:';
$gemini_max_tokens = FreshRSS_Context::$user_conf->gemini_max_tokens ?? 1024;
$gemini_temperature = FreshRSS_Context::$user_conf->gemini_temperature ?? 0.7;
?>

<form action="<?php echo _url('extension', 'configure', 'e', urlencode($this->getName())); ?>" method="post">
    <input type="hidden" name="_csrf" value="<?php echo FreshRSS_Auth::csrfToken(); ?>" />
    
    <h3>Google Gemini Configuration</h3>
    
    <div class="form-group">
        <label for="gemini_api_key">Google Gemini API Key:</label>
        <input type="password" name="gemini_api_key" id="gemini_api_key" value="<?php echo htmlspecialchars($gemini_api_key); ?>" placeholder="Enter your Google Gemini API key" style="width: 100%; max-width: 400px;">
        <small>Get your API key from <a href="https://ai.google.dev/" target="_blank">Google AI Studio</a></small>
    </div>
    
    <?php
    // Dynamically load Gemini models that support generateContent
    $gemini_models_error = '';
    $gemini_models = [];
    if (!empty($gemini_api_key)) {
        try {
            $baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models';
            $pageToken = null;
            do {
                $url = $baseUrl . '?pageSize=1000';
                if (!empty($pageToken)) {
                    $url .= '&pageToken=' . urlencode($pageToken);
                }
                $ch = curl_init();
                curl_setopt_array($ch, [
                    CURLOPT_URL => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_TIMEOUT => 15,
                    CURLOPT_SSL_VERIFYPEER => true,
                    CURLOPT_HTTPHEADER => [
                        'x-goog-api-key: ' . $gemini_api_key,
                    ],
                ]);
                $resp = curl_exec($ch);
                $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                $curl_err = curl_error($ch);
                curl_close($ch);

                if (!empty($curl_err) || $http_code !== 200) {
                    $gemini_models_error = 'Unable to fetch models list (HTTP ' . intval($http_code) . ').';
                    break;
                }

                $payload = json_decode($resp, true);
                if (isset($payload['models']) && is_array($payload['models'])) {
                    foreach ($payload['models'] as $m) {
                        $supported = $m['supportedGenerationMethods'] ?? [];
                        if (!in_array('generateContent', $supported, true)) {
                            continue; // Only show models that support generateContent
                        }
                        $name = $m['name'] ?? null; // Full model resource name: models/xxx
                        $baseId = $m['baseModelId'] ?? null; // Friendly id
                        $display = $m['displayName'] ?? $baseId ?? $name;
                        if ($name) {
                            // Prefer using full resource name to avoid version mismatches
                            $gemini_models[$name] = $display;
                        } elseif ($baseId) {
                            $gemini_models[$baseId] = $display;
                        }
                    }
                }
                $pageToken = $payload['nextPageToken'] ?? null;
            } while (!empty($pageToken));

            if (empty($gemini_models)) {
                if (empty($gemini_models_error)) {
                    $gemini_models_error = 'No models supporting generateContent were returned.';
                }
            } else {
                ksort($gemini_models);
            }
        } catch (Exception $e) {
            $gemini_models_error = 'Error while loading models.';
        }
    }
    ?>

    <div class="form-group">
        <label for="gemini_model">Gemini Model:</label>
        <select name="gemini_model" id="gemini_model">
            <?php if (!empty($gemini_models)): ?>
                <?php foreach ($gemini_models as $model_id => $label): ?>
                    <?php
                        $curr = (string)$gemini_model;
                        $idA = preg_replace('#^models/#', '', (string)$model_id);
                        $idB = preg_replace('#^models/#', '', $curr);
                        $is_selected = ($curr === (string)$model_id) || ($idA === $idB);
                    ?>
                    <option value="<?php echo htmlspecialchars($model_id); ?>" <?php echo ($is_selected ? 'selected' : ''); ?> title="<?php echo htmlspecialchars($model_id); ?>"><?php echo htmlspecialchars($label ?: $model_id); ?></option>
                <?php endforeach; ?>
            <?php else: ?>
                <!-- Fallback static options when API key is missing or listing failed -->
                <option value="gemini-2.5-flash" <?php echo ($gemini_model === 'gemini-2.5-flash' ? 'selected' : ''); ?>>Gemini 2.5 Flash (Latest Fast)</option>
                <option value="gemini-2.5-pro" <?php echo ($gemini_model === 'gemini-2.5-pro' ? 'selected' : ''); ?>>Gemini 2.5 Pro (Latest Premium)</option>
                <option value="gemini-2.0-flash" <?php echo ($gemini_model === 'gemini-2.0-flash' ? 'selected' : ''); ?>>Gemini 2.0 Flash</option>
                <option value="gemini-1.5-flash" <?php echo ($gemini_model === 'gemini-1.5-flash' ? 'selected' : ''); ?>>Gemini 1.5 Flash (Fast)</option>
                <option value="gemini-1.5-pro" <?php echo ($gemini_model === 'gemini-1.5-pro' ? 'selected' : ''); ?>>Gemini 1.5 Pro (Higher Quality)</option>
                <option value="gemini-pro" <?php echo ($gemini_model === 'gemini-pro' ? 'selected' : ''); ?>>Gemini Pro (Legacy)</option>
            <?php endif; ?>
        </select>
        <?php if (!empty($gemini_models_error)): ?>
            <small><?php echo htmlspecialchars($gemini_models_error); ?></small>
        <?php elseif (empty($gemini_api_key)): ?>
            <small>Enter your API key to load the latest models.</small>
        <?php endif; ?>
    </div>
    
    <div class="form-group">
        <label for="gemini_general_prompt">General Articles Prompt:</label>
        <textarea name="gemini_general_prompt" id="gemini_general_prompt" rows="3" style="width: 100%; max-width: 600px;"><?php echo htmlspecialchars($gemini_general_prompt); ?></textarea>
        <small>This prompt will be used for regular text articles and blog posts</small>
    </div>
    
    <div class="form-group">
        <label for="gemini_youtube_prompt">YouTube Videos Prompt:</label>
        <textarea name="gemini_youtube_prompt" id="gemini_youtube_prompt" rows="3" style="width: 100%; max-width: 600px;"><?php echo htmlspecialchars($gemini_youtube_prompt); ?></textarea>
        <small>This prompt will be used for YouTube videos (uses video title and description)</small>
    </div>
    
    <div class="form-group">
        <label for="gemini_max_tokens">Maximum Output Tokens:</label>
        <input type="number" name="gemini_max_tokens" id="gemini_max_tokens" value="<?php echo htmlspecialchars($gemini_max_tokens); ?>" min="100" max="4096" step="1" style="width: 120px;">
        <small>Maximum length of the generated summary (100-4096 tokens)</small>
    </div>
    
    <div class="form-group">
        <label for="gemini_temperature">Temperature (Creativity):</label>
        <input type="number" name="gemini_temperature" id="gemini_temperature" value="<?php echo htmlspecialchars($gemini_temperature); ?>" min="0" max="2" step="0.1" style="width: 120px;">
        <small>Controls randomness: 0.0 (focused) to 2.0 (creative). Recommended: 0.7</small>
    </div>
    
    <hr />
    <button type="submit" class="btn btn-important">Save Configuration</button>
</form>

<style>
.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
}

.form-group small {
    display: block;
    color: #666;
    margin-top: 5px;
    font-style: italic;
}

.form-group input,
.form-group select,
.form-group textarea {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
}

.btn-important {
    background: #4285f4;
    color: white;
}

.btn-important:hover {
    background: #3367d6;
}

/* Dark mode support for configuration form */
@media (prefers-color-scheme: dark) {
    .form-group small {
        color: #a0aec0;
    }
    
    .form-group input,
    .form-group select,
    .form-group textarea {
        background: #2d3748;
        border: 1px solid #4a5568;
        color: #e2e8f0;
    }
    
    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
        border-color: #4285f4;
        outline: none;
        box-shadow: 0 0 0 2px rgba(66, 133, 244, 0.2);
    }
}
</style>
